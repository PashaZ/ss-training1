{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst request = async (url, fetchData) => {\n  _s();\n\n  const [status, setStatus] = useState({\n    data: undefined,\n    error: undefined\n  });\n\n  async function fetchNow(url, fetchData) {\n    const res = await fetch(url, fetchData);\n    const data = await res.json();\n\n    if (!res.ok) {\n      throw new Error(data.message || \"Something was wrong\");\n    } else {\n      return alert(setStatus({\n        data: data\n      })); //   alert(data);\n    }\n  } //   try {\n  //     if (fetchData) {\n  //       request();\n  //     }\n  //   } catch (error) {\n  //     return setStatus({error});\n  //   }\n\n\n  useEffect(() => {\n    if (fetchData) {\n      fetchNow(url, fetchData);\n    }\n  }, []);\n};\n\n_s(request, \"tUZwQwgtN1jPoAHIwtzHhACiQko=\");\n\nexport default request;","map":{"version":3,"sources":["C:/training/ss-training1/frontend/src/hooks/request.js"],"names":["useState","useEffect","request","url","fetchData","status","setStatus","data","undefined","error","fetchNow","res","fetch","json","ok","Error","message","alert"],"mappings":";;AACA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACjCO,IAAAA,IAAI,EAAEC,SAD2B;AAEjCC,IAAAA,KAAK,EAAED;AAF0B,GAAD,CAApC;;AAIJ,iBAAeE,QAAf,CAAwBP,GAAxB,EAA6BC,SAA7B,EAAuC;AACnC,UAAMO,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAMC,SAAN,CAAvB;AACA,UAAMG,IAAI,GAAG,MAAMI,GAAG,CAACE,IAAJ,EAAnB;;AACA,QAAI,CAACF,GAAG,CAACG,EAAT,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAUR,IAAI,CAACS,OAAL,IAAgB,qBAA1B,CAAN;AACD,KAFD,MAEO;AACL,aACDC,KAAK,CAAEX,SAAS,CAAC;AAACC,QAAAA,IAAI,EAACA;AAAN,OAAD,CAAX,CADJ,CADK,CAIP;AACC;AACJ,GAhByC,CAiB1C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEN,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGG,SAAH,EAAa;AACXM,MAAAA,QAAQ,CAACP,GAAD,EAAMC,SAAN,CAAR;AACD;AACJ,GAJQ,EAIN,EAJM,CAAT;AAKD,CA7BD;;GAAMF,O;;AA+BN,eAAeA,OAAf","sourcesContent":["\r\nimport {useState, useEffect} from 'react'\r\n\r\nconst request = async (url, fetchData) => {\r\n    const [status, setStatus] = useState({\r\n        data: undefined,\r\n        error: undefined\r\n    })\r\nasync function fetchNow(url, fetchData){\r\n    const res = await fetch(url, fetchData);\r\n    const data = await res.json();\r\n    if (!res.ok) {\r\n      throw new Error(data.message || \"Something was wrong\");\r\n    } else {\r\n      return (\r\n     alert (setStatus({data:data}))\r\n      )\r\n    //   alert(data);\r\n    }\r\n}\r\n//   try {\r\n//     if (fetchData) {\r\n//       request();\r\n//     }\r\n//   } catch (error) {\r\n//     return setStatus({error});\r\n//   }\r\n  useEffect(()=>{\r\n      if(fetchData){\r\n        fetchNow(url, fetchData)\r\n      }\r\n  }, [])\r\n};\r\n\r\nexport default request;"]},"metadata":{},"sourceType":"module"}